/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rpg.Frames;

import rpg.Controllers.ThaoAcademy;
import rpg.Databases.ThaoDatabase;
import rpg.Main;

/**
 *
 * @author Christian
 */
public class Thao extends javax.swing.JFrame {

    int location=0;
    String command;
    private static ThaoAcademy control = new ThaoAcademy();
    public final static String[][] OUTSIDE = {
        {"1.","Go Inside"},
        {"2.","Go to the Dorms"},
        {"3.","Go to the Marketplace"},
        {"4.","Talk"},
        {"5.","Leave the Academy"}
    };
    private final static String[][] INSIDE = {
        {"1.","Go to Class"},
        {"2.","Go to the Cafeteria"},
        {"3.","Go to the Teleporter"},
        {"4.","Talk"},
        {"5.","Go Outside"}
    };
    private final static String[][] DORM = {
        {"1.","Go to your Room"},
        {"2.","Talk"},
        {"3.","Leave the Dorms"}
    };
    private final static String[][] CAFE = {
        {"1.","Eat"},
        {"2.","Talk"},
        {"3.","Leave the Cafeteria"}
    };
    private final static String[][] TELEPORT = {
        {"1.","Use the Teleporter"},
        {"2.","Talk"},
        {"3.","Leave the Teleporter"}
    };
    private final static String[][] MARKET = {
        {"1.","Weapon Shop"},
        {"2.","Magic Shop"},
        {"3.","Item Shop"},
        {"4.","Talk"},
        {"5.","Leave the Marketplace"}
    };
    
    /**
     * Creates new form Thao
     */
    public Thao() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        displayPane = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        submit = new javax.swing.JButton();
        choice_entry = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        choices = new javax.swing.JTextArea();
        pauseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Thao Academy Entrance");

        display.setEditable(false);
        display.setColumns(20);
        display.setLineWrap(true);
        display.setRows(5);
        displayPane.setViewportView(display);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayPane, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayPane, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
        );

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        choices.setColumns(20);
        choices.setRows(5);
        jScrollPane2.setViewportView(choices);

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(choice_entry, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submit)
                    .addComponent(choice_entry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pauseButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        switch (location) {
            case 0:
                do {
                    command = choice_entry.getText();
                    command = command.trim().toUpperCase();
                    switch (command) {
                        case "1":
                            location = 1;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.INSIDE));
                            choice_entry.setText("");
                            break;
                        case "2":
                            location = 2;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.DORM));
                            choice_entry.setText("");
                            break;
                        case "3":
                            location = 5;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.MARKET));
                            choice_entry.setText("");
                            break;
                        case "4":
                            display.append(control.getTalk(location));
                            choice_entry.setText("");
                            break;
                        case "5":
                            AkashicTrials.outside.setVisible(true);
                            AkashicTrials.outside.setTitle("Outside");
                            AkashicTrials.outside.choices.setText(Main.convertArray(Outside.menuItems));
                            choice_entry.setText("");
                            this.setVisible(false);
                            break;
                        default:
                            System.out.println("Invalid command. Please enter a valid command.");
                    }
                    break;
                }while(!command.equals("EXIT"));
                break;
            case 1:
                do {
                    command = choice_entry.getText();
                    command = command.trim().toUpperCase();
                    
                    switch (command) {
                        case "1":
                            control.goToClass();
                            break;
                        case "2":
                            location = 3;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.CAFE));
                            choice_entry.setText("");
                            break;
                        case "3":
                            location = 4;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.TELEPORT));
                            choice_entry.setText("");
                            break;
                        case "4":
                            display.append(control.getTalk(location));
                            choice_entry.setText("");
                            break;
                        case "5":
                            location = 0;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.OUTSIDE));
                            choice_entry.setText("");
                            break;
                        default:
                            System.out.println("Invalid command. Please enter a valid command.");
                    }
                    break;
                }while(!command.equals("5"));
                break;
            case 2:
                do {
                    command = choice_entry.getText();
                    command = command.trim().toUpperCase();
                    
                    switch (command) {
                        case "1":
                            control.room();
                            break;
                        case "2":
                            display.append(control.getTalk(location));
                            choice_entry.setText("");
                            break;
                        case "3":
                            location = 0;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.OUTSIDE));
                            choice_entry.setText("");
                            break;
                        default:
                            System.out.println("Invalid command. Please enter a valid command.");
                    }
                    break;
                }while(!command.equals("3"));
                break;
            case 3:
                do {
                    command = choice_entry.getText();
                    command = command.trim().toUpperCase();
                    
                    switch (command) {
                        case "1":
                            control.eat();
                            break;
                        case "2":
                            display.append(control.getTalk(location));
                            break;
                        case "3":
                            location = 1;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.INSIDE));
                            choice_entry.setText("");
                            break;
                        default:
                            System.out.println("Invalid command. Please enter a valid command.");
                    }
                    break;
                }while(!command.equals("3"));
                break;
            case 4:
                do {
                    command = choice_entry.getText();
                    command = command.trim().toUpperCase();
                    
                    switch (command) {
                        case "1":
                            control.teleport();
                            break;
                        case "2":
                            display.append(control.getTalk(location));
                            break;
                        case "3":
                            location = 1;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.INSIDE));
                            choice_entry.setText("");
                            break;
                        default:
                            System.out.println("Invalid command. Please enter a valid command.");
                    }
                    break;
                }while(!command.equals("3"));
                break;
            case 5:
                do {
                    command = choice_entry.getText();
                    command = command.trim().toUpperCase();
                    
                    switch (command) {
                        case "1":
                            control.weapon();
                            break;
                        case "2":
                            control.magic();
                            break;
                        case "3":
                            control.item();
                            break;
                        case "4":
                            display.append(control.getTalk(location));
                            break;
                        case "5":
                            location = 0;
                            this.setTitle(ThaoDatabase.getName(location));
                            display.setText(ThaoDatabase.getDesc(location));
                            choices.setText(Main.convertArray(Thao.OUTSIDE));
                            choice_entry.setText("");
                            break;
                        default:
                            System.out.println("Invalid command. Please enter a valid command.");
                    }
                    break;
                }while(!command.equals("5"));
                break;
        }
    }//GEN-LAST:event_submitActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        this.setVisible(false);
        AkashicTrials.pause.setVisible(true);
    }//GEN-LAST:event_pauseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Thao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Thao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Thao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Thao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Thao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField choice_entry;
    public javax.swing.JTextArea choices;
    public javax.swing.JTextArea display;
    private javax.swing.JScrollPane displayPane;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
